{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","CommentItem","item","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","AddedCommentHandler","useCallback","length","onClick","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.90a48368.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__2F37A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3nke3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__23Hv6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__IU6XQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__Fc3Gi\",\"loading\":\"NewCommentForm_loading__1CvwT\",\"control\":\"NewCommentForm_control__3ieP1\",\"actions\":\"NewCommentForm_actions__30zVz\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect } from \"react\";\nimport { useRef } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  \n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n    const enteredText = commentTextRef.current.value;\n    // send comment to server\n\n    sendRequest({commentData: { text: enteredText }, quoteId:props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          {\" \"}\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport { useCallback } from \"react\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n  const { quoteId } = params;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const AddedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n\n  }, [sendRequest,quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        {\" \"}\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">NO comments added yet</p>;\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={AddedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment } from \"react\";\nimport { useParams, Route, useRouteMatch } from \"react-router-dom\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport Comments from \"../components/comments/Comments\";\nimport { Link } from \"react-router-dom\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nimport { useEffect } from \"react\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nconst QuoteDetail = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n  const { quoteId } = params;\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\nif(status==='pending'){\n  return <div className=\"centered\">\n    <LoadingSpinner/>\n  </div>\n   \n}\n\nif(error){\n  return <p className=\"centered\">{error}</p>\n}\nif(!loadedQuote.text){\n  return <p>NO quote found</p>\n}\n\n\n\n  // // const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\n  // if (!quote) {\n  //   return <p>No Quote Found</p>;\n  // }\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={match.path} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}